#!/usr/bin/python

import sys, os, shutil
from os.path import join, expanduser, exists, islink, isdir
import subprocess

ph = expanduser

def usage(msg=''):
	print(msg+
		  "\n -help:\n"
		  "Use it to install all the plugins inside the PLUGINS_HOME and XMIPP_HOME\n"
	      "to scipion. It's done via 'pip --devel' (default), via symbolic link (-sym)\n"
	      "or via PYTHONPATH (-env)\n"
	      "\n"
	      " -> usage: plugins-register [options]\n"
	      "       options: SCIPION_CMD   = ./scipion\n"
	      "                SCIPION_HOME  = ~/scipion\n"
	      "                PLUGINS_HOME  = ~/scipion-em\n"
	      "                XMIPP_HOME    = ~/xmipp-bundle\n"
	      "                XMIPP_VERSION = X.YY:MM (should match with the config file. Empty allowed)  \n"
	      "                -noBin: to avoid the install of the Xmipp software\n"
	      "                -sym or -env: to make a sym. link or to set the PYTHONPATH. \n"
	      "                -clean: uninstall all the plugins. -sym or -env is available.\n"
	      "\n"
	      " -> example: plugins-register SCIPION_HOME=~/scipion-pluginized PLUGINS_HOME=~/plugins2scipion\n")
	sys.exit()

def CheckPath(pathStr, ok=True):
	path = eval(pathStr)
	if os.path.exists(path):
		print("%s = %s ... ok!" % (pathStr, path))
		return ok
	else:
		print("%s not found... please check the %s" % (path, pathStr))
		return False

def link(src, dst):
	if islink(dst):
		msg = "%s already is existing, re" % dst.split('/')[-1]
		os.remove(dst)
	elif isdir(dst):
		msg = "%s already is existing, re" % dst.split('/')[-1]
		shutil.rmtree(dst)
	else:
		msg = "%s " % dst.split('/')[-1]
	os.symlink(src, dst)
	if exists(dst):
		print("%sinstalled via symbolic link" % msg)
	else:
		print("%sinstalling... there was a problem. Not installed" % msg)

def remove(plugFn):
	if islink(plugFn):
		os.remove(plugFn)
		plugName = plugFn.split('/')[-1]
		print("%s uninstalled" % plugName)

def findPlugName(pluginDir):
	pluginContent = os.listdir(pluginDir)
	for firstDir in pluginContent:
		if isdir(join(pluginDir, firstDir)):
			return firstDir
	return None

print 

mode = 'pip'
clean = False
noBin = False
argOk = True
SCIPION_CMD  = './scipion'
SCIPION_HOME = ph('~/scipion')
PLUGINS_HOME = ph('~/scipion-em')
XMIPP_HOME   = ph('~/xmipp-bundle')
XMIPP_VERSION = ''
for arg in sys.argv[1:]:
	if arg.startswith('-'):
		if arg == '-env':
			mode = 'env'
		elif arg == '-sym':
			mode = 'sym'
		elif arg == '-clean':
			clean = True
		elif arg == '-noBin':
			noBin = True
		else:
			argOk = False
	elif '=' in arg:
		argV = arg.split('=')[1]
		if arg.startswith('XMIPP_HOME='):
			XMIPP_HOME = ph(argV)
		elif arg.startswith('PLUGINS_HOME='):
			PLUGINS_HOME = ph(argV)
		elif arg.startswith('SCIPION_HOME='):
			SCIPION_HOME = ph(argV)
		elif arg.startswith('SCIPION_CMD='):
			SCIPION_CMD = argV
		elif arg.startswith('XMIPP_VERSION='):
			XMIPP_VERSION = '-%s'%argV
		else:
			argOk = False
	else:
		argOk = False
	if not argOk:
		usage("...error: param %s is not understood\n" % arg)

ok = True
ok = CheckPath("XMIPP_HOME", ok)
ok = CheckPath("PLUGINS_HOME", ok)
ok = True if mode=='env' else CheckPath("SCIPION_HOME", ok)
if not ok:
	usage()

print 

scipionPlugins = []
for folder in os.listdir(PLUGINS_HOME):
	if folder.startswith('scipion-em-'):
		scipionPlugins.append(folder)

if mode == 'env':
	if clean:
		print(" run 'unset PYTHONPATH' to uninstall all plugins.\n"
			  "  ...some other paths will be deleted...")
		sys.exit()
	else:
		pyPath = os.environ.get('PYTHONPATH','')
		pyPathList = [pyPath, join(XMIPP_HOME,'src','scipion-em-xmipp')]

		print("plugins found:")
		for plugin in scipionPlugins:
			pyPathList.append(plugin)
			print(" -> %s" % plugin)

		os.environ.update({'PYTHONPATH': ':'.join(pyPathList)	})

		print("")
		print("This plugins WILL be installed via setting PYTHONPATH once you run the folowing command:")
		print("")
		print("  export PYTHONPATH=%s" % os.environ.get('PYTHONPATH'))

elif mode == 'sym':

	plugDest = join(SCIPION_HOME,"software","lib","python2.7","site-packages")

	if clean:
		remove(join(plugDest,'xmipp3'))
	else:
		link(join(XMIPP_HOME,'src','scipion-em-xmipp','xmipp3'), join(plugDest,'xmipp3'))
		
	for plugin in scipionPlugins:
		pluginDir = join(PLUGINS_HOME, plugin)

		pluginName = findPlugName(pluginDir)

		if pluginName is None:
			print(" > > >  Plugin not found in %s  < < < " % pluginDir)
			continue
		if clean:
			remove(join(plugDest, pluginName))
		else:
			link(join(pluginDir, pluginName), join(plugDest, pluginName))

else:

	oldCwd = os.getcwd()
	os.chdir(SCIPION_HOME)
	binStr = ' --noBin' if noBin else ''
	for plugin in scipionPlugins:
		pluginDir = join(PLUGINS_HOME, plugin)
		ok = os.system('%s installp -p %s --devel%s' 
			           % (SCIPION_CMD, pluginDir, binStr))

	ok = os.system('%s installp -p %s --devel --noBin' 
		           % (SCIPION_CMD, join(XMIPP_HOME,  'src' ,'scipion-em-xmipp')))

	os.chdir(oldCwd)

if not noBin and not clean:
	link(join(XMIPP_HOME,'build'), 
		 join(SCIPION_HOME,"software", "em", 'xmipp%s' % XMIPP_VERSION))


print
